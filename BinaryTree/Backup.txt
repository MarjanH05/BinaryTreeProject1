//Main.cpp
#include "BinaryTree.h"
#include "CommandLine.h"

int main(int argc, char* argv[]) {
    std::string inputFile; 
    std::string outputFile;
    BoostCommand(argc, argv, inputFile, outputFile);
    Tree tree;  
    tree.readFromFile(inputFile, outputFile);  
    return 0; 
}

//BinaryTree.h

#include <iostream>
#include <string>
#include <memory>
#include <stack>
#include <regex>
#include <sstream>
#include <cmath>
#include <fstream>
#include <map>
#include <functional>
#include <boost/program_options.h>`
#include <cmath>

struct TreeNode {
    std::string value;
    std::shared_ptr<TreeNode> left;
    std::shared_ptr<TreeNode> right;

    TreeNode(const std::string& val) : value(val), left(nullptr), right(nullptr) {}
};

class Tree {
public:
    std::shared_ptr<TreeNode> root;

    void buildTree(const std::string& expression);

    double Evaluate() {
        return EvaluateTree(root);
    }

    void readFromFile(const std::string& inputFile,const std::string& outputFile);

    void writeToFile(const std::string& outputFile, const std::string& expression, double result);

private:
    int precedence(const std::string& op);
    double EvaluateTree(std::shared_ptr<TreeNode> node);
};

//BinaryTree.ccpp

#include "BinaryTree.h"

void Tree::buildTree(const std::string& expression) {
    std::stack<std::shared_ptr<TreeNode>> values;
    std::stack<std::shared_ptr<TreeNode>> operators;

    std::regex token_regex("(-?\\d+\\.\\d+|-?\\d+|[-+*/^()])"); //possible negative float , possible negative int , operators


    auto begin = std::sregex_iterator(expression.begin(), expression.end(), token_regex);
    auto end = std::sregex_iterator();

    std::string previous_token;
    bool expect_number = true;

    for (auto it = begin; it != end; ++it) {
        std::string token = (*it).str();

        if (token == "-" && (expect_number || previous_token == "(")) {
            ++it;
            if (it == end) throw std::invalid_argument("Invalid expression: dangling '-'");
            token += (*it).str();
        }

        if (previous_token == "-" && token == "-") {
            token = "+"; 
        }

        if (!previous_token.empty() &&
            ((std::any_of(previous_token.begin(), previous_token.end(), ::isdigit) && token == "(") ||
                (previous_token == ")" && (std::any_of(token.begin(), token.end(), ::isdigit) || token == "(")))) {
            operators.push(std::make_shared<TreeNode>("*"));
        }

        if (std::any_of(token.begin(), token.end(), ::isdigit)) {
            values.push(std::make_shared<TreeNode>(token));
            expect_number = false;
        }
        else if (token == "+" || token == "-" || token == "*" || token == "/" || token == "^") {
            while (!operators.empty() && precedence(operators.top()->value) >= precedence(token)) {
            }
            operators.push(std::make_shared<TreeNode>(token));
            expect_number = true;
        }
        else if (token == "(") {
            operators.push(std::make_shared<TreeNode>(token));
            expect_number = true;
        }
        else if (token == ")") {
            while (!operators.empty() && operators.top()->value != "(") {
            }
            operators.pop();
            expect_number = false;
        }

        previous_token = token;
    }
    root = values.top();
}



bool CheckifText(const std::string& filename) {
    size_t pos = filename.rfind('.');
    if (pos != std::string::npos) {
        return filename.substr(pos) == ".txt";  // Check if the extension is .txt
    }
    return false;  // No extension found
}

void Tree::readFromFile(const std::string& inputFile, const std::string& outputFile) {
    std::ifstream file(inputFile);
    std::string expression;

    if (file) {
        while (std::getline(file, expression)) {
            buildTree(expression);
            double result = Evaluate();
            /*printTree();*/
            std::cout << expression << std::endl;
            writeToFile(outputFile, expression, result);
            std::cout << "The result of that was " << result << "\n";
            std::cin.ignore(); 
        }
        file.close();
    }
    else {
        std::cerr << "Error opening input file: " << inputFile << std::endl;
    }
}

void Tree::writeToFile(const std::string& outputFile, const std::string& expression, double result) {
    if (!CheckifText(outputFile)) {
        std::cerr << "Error: The file must have a .txt extension!" << std::endl;
        return; 
    }

    std::ofstream file(outputFile, std::ios::app);
    if (file) {
        file << expression << " = " << result << std::endl;
        file.close();
        std::cout << "Successfully written to file: " << outputFile << std::endl;
    }
    else {
        std::cerr << "Error opening file for writing: " << outputFile << std::endl;
    }
}

//change to Switch

int Tree::precedence(const std::string& op) {
    switch (op[0])
    {
    case '+':
    case '-':
        return 1;
    case '*':
    case '/':
        return 2;
    case '^':
        return 3;
    default:
        return 0;
    }
}

double Tree::EvaluateTree(std::shared_ptr<TreeNode> node) {
    if (!node) return 0;

    if (isdigit(node->value[0]) || (node->value[0] == '-' && isdigit(node->value[1]))) {
        return std::stod(node->value);
    }

    double lNode = EvaluateTree(node->left);
    double rNode = EvaluateTree(node->right);
}

//CommandLine.h

#pragma once
#include <iostream>
#include <boost/program_options.h>

void BoostCommand(int argc, char* argv[], std::string& inputFile, std::string& outputFile) {
    try {
        boost::program_options::options_description desc("Allowed options"); 
        desc.add_options()
            ("help,h", "Show help message")
            ("source,s", boost::program_options::value<std::string>(&inputFile)->required(), "Input source file")
            ("result,r", boost::program_options::value<std::string>(&outputFile)->required(), "Output result file");

        boost::program_options::variables_map vm;
        boost::program_options::store(boost::program_options::parse_command_line(argc, argv, desc), vm);

        if (vm.count("help")) {
            std::cout << desc << std::endl;
            exit(0);
        }
        boost::program_options::notify(vm);

        std::cout << "Input source file: " << inputFile << std::endl;
        std::cout << "Output result file: " << outputFile << std::endl;
    }
    catch (const boost::program_options::error& ex) { 
        std::cerr << "Command-line error: " << ex.what() << std::endl;
    }
    catch (const std::exception& ex) {
        std::cerr << "Error: " << ex.what() << std::endl; 
    }
    catch (...) {
        std::cerr << "An unknown error occurred!" << std::endl;
    } 
}
