// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#include "winrt/BinaryTreeGUI.h"
#include "winrt/Microsoft.UI.Xaml.h"
namespace winrt::BinaryTreeGUI::implementation
{
    template <typename D, typename... I>
    struct WINRT_IMPL_EMPTY_BASES MainWindow_base : implements<D, BinaryTreeGUI::MainWindow, composing, I...>,
        impl::require<D, winrt::Microsoft::UI::Xaml::IWindow, winrt::Microsoft::UI::Xaml::IWindow2>,
        impl::base<D, winrt::Microsoft::UI::Xaml::Window>
    {
        using base_type = MainWindow_base;
        using class_type = BinaryTreeGUI::MainWindow;
        using implements_type = typename MainWindow_base::implements_type;
        using implements_type::implements_type;
        using composable_base = winrt::Microsoft::UI::Xaml::Window;
        hstring GetRuntimeClassName() const
        {
            return L"BinaryTreeGUI.MainWindow";
        }
        MainWindow_base()
        {
            impl::call_factory<winrt::Microsoft::UI::Xaml::Window, winrt::Microsoft::UI::Xaml::IWindowFactory>([&](winrt::Microsoft::UI::Xaml::IWindowFactory const& f) { [[maybe_unused]] auto winrt_impl_discarded = f.CreateInstance(*this, this->m_inner); });
        }
    };
}
namespace winrt::BinaryTreeGUI::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_IMPL_EMPTY_BASES MainWindowT : implements<D, winrt::Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = BinaryTreeGUI::MainWindow;

        hstring GetRuntimeClassName() const
        {
            return L"BinaryTreeGUI.MainWindow";
        }
        auto ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_MAINWINDOW_XAML_G_H) || __has_include("MainWindow.xaml.g.h")

#include "MainWindow.xaml.g.h"

#else

namespace winrt::BinaryTreeGUI::implementation
{
    template <typename D, typename... I>
    using MainWindowT = MainWindow_base<D, I...>;
}

#endif
